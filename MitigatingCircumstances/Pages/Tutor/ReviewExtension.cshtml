@page
@model ReviewExtensionModel
@using MitigatingCircumstances.Models.Enum;

@{
    ViewData["Title"] = "Create Extension Request";
}

@if (Model.ExtensionRequest == null)
{
    <div class="alert alert-warning alert-dismissible" role="alert">
        Sorry, the item you're looking for cannot be found.
    </div>
    return;
}

<div class="row justify-content-center">
    <div class="col-sm-12 col-xs-12 col-md-10 col-lg-7">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title text-center">Review extension request</h5>
                <div class="form-group">
                    <h6>Student</h6>
                    <p>@Model.ExtensionRequest.StudentCreatedBy.Fullname</p>
                </div>

                <div class="form-group">
                    <h6>Title</h6>
                    <p>@Model.ExtensionRequest.Title</p>
                </div>

                <div class="form-group">
                    <h6>Description</h6>
                    <p> @Model.ExtensionRequest.Description</p>
                </div>

                <div class="form-group">
                    <h6>Uploaded documents</h6>
                    <ul>
                        @foreach (var document in Model.ExtensionRequest.UploadedDocuments)
                        {
                            <li><a href="@document.MediaLink">@document.Name</a></li>
                        }
                    </ul>
                </div>

                <div class="form-group">
                    <h6>Status</h6>
                    <p>
                        @switch (Model.ExtensionRequest.Status)
                        {
                            case ExtensionRequestStatus.Open:
                                <span class="badge badge-big badge-info">Open</span>
                                break;

                            case ExtensionRequestStatus.Approved:
                                <span class="badge badge-big badge-success">Approved</span>
                                break;

                            case ExtensionRequestStatus.Rejected:
                                <span class="badge badge-big badge-danger">Rejected</span>
                                break;

                            case ExtensionRequestStatus.Closed:
                                <span class="badge badge-big badge-secondary">Closed</span>
                                break;
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>


@if (Model.ExtensionRequest.Status == ExtensionRequestStatus.Open)
{
    <br />
    <div class="row justify-content-center">
        <div class="col-sm-12 col-xs-12 col-md-10 col-lg-7">
            <div class="card">
                <div class="card-body">
                    <h5 class="text-center">Action</h5>
                    <label>Reply</label>

                    <textarea name="replyMessage" class="form-control" rows="4"></textarea>
                    <input name="extensionRequestId" type="hidden" value="@Model.ExtensionRequest.Id"/>

                    <br />
                    <p class="float-right">
                        <button data-button-action="1" class="btn btn-success change-extension-state">
                            Approve
                        </button>

                        <button data-button-action="2" class="btn btn-danger change-extension-state">
                            Reject
                        </button>

                        <button data-button-action="3" class="btn btn-secondary change-extension-state">
                            Close
                        </button>
                    </p>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(() => {
            let form = $("#reviewExtensionForm")[0];
            let app = new Vue({
                el: "#formUserFeedback",
                data: {
                    initialized: false,
                    request: {
                        loading: false,
                        successful: false,
                        title: "undefined",
                        errorMsg: "undefined"
                    }
                }
            });

            var attrName = "data-button-action";

            $(`button[${attrName}]`).on("click", e => {
                var action = $(e.currentTarget).attr(attrName);

                if (!app.request.loading) {
                    var formData = new FormData(form);

                    $.ajax({
                        type: "POST",
                        url: "/api/extension_request/change_state",
                        processData: false,
                        contentType: false,
                        cache: false,
                        data: formData,
                        beforeSend: xhr => {
                            app.request.loading = true;
                        },
                        success: (r, xhr) => {
                            app.request.loading = false;
                            app.request.successful = true;
                            app.request.title = $("#Input_Title").val();
                            form.reset();
                        },
                        error: (xhr, textStatus, errorThrown) => {
                            app.request.loading = false;
                            app.request.successful = false;
                            app.request.errorMsg = xhr.responseText;
                        },
                        complete: (xhr) => {
                            app.initialized = true;
                        }
                    });
                }
            });
        });
    </script>
}